{"version":3,"sources":["theme/index.js","api/PollApi.js","components/Loader.js","api/MovieApi.adapter.js","api/MovieApi.js","components/MovieDetails.js","components/AddBar.js","pages/PollScreen/index.js","App.js","serviceWorker.js","index.js"],"names":["theme","margin","x1","x2","BASE_SPACING","x3","color","WHITE","BLACK","GREY","BLUE","BASE_URL","getPoll","a","fetch","response","json","data","simpleJsonToFormData","Object","keys","map","key","join","voteForPoll","answerId","body","method","headers","results","addAnswerToPoll","id","title","Container","styled","div","Loader","type","height","width","mapFromTMDToMovie","TMDResult","getYear","parseISO","release_date","API_KEY","searchMovie","queryString","length","slice","getMovieDetails","movieId","Title","h3","GenreLabel","p","Overview","MovieDetails","React","memo","useState","movie","setMovie","fetchMovie","useCallback","movieDetails","useEffect","genres","genre","name","overview","Description","h2","SearchButton","SearchButtonLabel","SearchContainer","SearchBarContainer","input","SearchResultContainer","props","isEmpty","SearchResultContentContainer","SearchResultLabel","AddBar","addAnwser","movieList","setMovieList","onSearch","query","document","getElementById","value","movies","placeholder","onClick","movieTitle","console","log","h1","AnswerContainer","isAnswer","AnswerLabel","LineContainer","InfoButton","selected","InfoButtonLabel","Spacer","PollScreen","poll","setPoll","setAnswerId","setResults","infoStates","setInfoStates","hasAnswered","fetchPoll","fetchedPoll","onAnswer","pollAnswers","answers","answer","num","denom","values","reduce","accu","curr","Math","round","getPercentage","states","acc","onInfoClick","movieIdString","toString","find","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9512997e.chunk.js","sourcesContent":["const BASE_SPACING = 8;\n\nexport const theme = {\n  margin: {\n    x1: BASE_SPACING,\n    x2: BASE_SPACING * 2,\n    x3: BASE_SPACING * 3\n  },\n  color: {\n    WHITE: \"#FFFFFF\",\n    BLACK: \"#000000\",\n    GREY: 'grey',\n    BLUE: \"#00BFFF\",\n  }\n}","const BASE_URL = \"https://hidden-reef-75246.herokuapp.com/\";\n// const BASE_URL = \"http://localhost:5000/\";\n\nexport const getPoll = async () => {\n  const response = await fetch(`${BASE_URL}poll`);\n  const data = await response.json();\n  if (data) {\n    return data;\n  } else {\n    return null;\n  }\n}\n\nconst simpleJsonToFormData = (json) => (\n  Object.keys(json).map(key => `${key}=${json[key]}`).join(\"&\")\n);\n\nexport const voteForPoll = async (answerId) => {\n  const body = { answerId };\n  const response = await fetch(\n    `${BASE_URL}poll/vote`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: simpleJsonToFormData(body)\n    }\n  );\n  const results = await response.json();\n  return results;\n};\n\nexport const addAnswerToPoll = async (id, title) => {\n  const body = { id, title };\n  const response = await fetch(\n    `${BASE_URL}poll/answer/append`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: simpleJsonToFormData(body)\n    }\n  );\n  const results = await response.json();\n  return results;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport LoaderSpinner from 'react-loader-spinner'\nimport { theme } from \"../theme\";\n\nconst LOADER_SIZE = 80;\n\nconst Container = styled.div`\n  display: flex;\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background-color: black;\n`;\n\nexport const Loader = () => (\n  <Container>\n    <LoaderSpinner\n      type=\"Bars\"\n      color={theme.color.BLUE}\n      height={LOADER_SIZE}\n      width={LOADER_SIZE}\n    />\n  </Container>\n)","import { parseISO, getYear } from \"date-fns\";\n\nexport const mapFromTMDToMovie = (TMDResult) => ({\n  id: TMDResult.id,\n  title: `${TMDResult.title} (${getYear(parseISO(TMDResult.release_date))})`\n});\n","import { mapFromTMDToMovie } from \"./MovieApi.adapter\";\n\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\nconst SEARCH_MOVIE = \"search/movie\";\nconst GET_MOVIE = \"movie/\";\n\nconst API_KEY = \"f272a5f43ce4cc5810634ac04d30aa7d\";\n\nexport const searchMovie = async (queryString) => {\n  const response = await fetch(`${BASE_URL}${SEARCH_MOVIE}?api_key=${API_KEY}&language=fr-FR&page=1&include_adult=false&query=${queryString}`);\n  const data = await response.json();\n  if (data.results.length) {\n    return data.results.map(mapFromTMDToMovie).slice(0,10);\n  } else {\n    return null;\n  }\n};\n\nexport const getMovieDetails = async (movieId) => {\n  const response = await fetch(`${BASE_URL}${GET_MOVIE}${movieId}?api_key=${API_KEY}&language=fr-FR`)\n  const data = await response.json();  \n  return data;\n};\n\n// export const getDetailsFromMovies = async (movieIds) => {\n//   const movies = await Promise.all(movieIds.map(getMovieDetails));\n//   console.warn(\"movies: \", movies);\n//   return movies;\n// };\n \n// const getImage = async (imageId) => {\n//   const response = await fetch(`https://image.tmdb.org/t/p/w600_and_h900_bestv2/${imageId}`);\n// };\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { getMovieDetails } from \"../api/MovieApi\"\nimport styled from 'styled-components';\nimport { theme } from '../theme';\n\nconst Title = styled.h3`\n  color: ${theme.color.WHITE};\n`\n\nconst GenreLabel = styled.p`\n  color: ${theme.color.WHITE};\n`\n\nconst Overview = styled.p`\n  color: ${theme.color.WHITE};\n  text-align: justify;\n`\n\nexport const MovieDetails = React.memo(({ movieId }) => {\n  const [movie, setMovie] = useState(null);\n\n  const fetchMovie = useCallback(async (movieId) => {\n    const movieDetails = await getMovieDetails(movieId);\n    setMovie(movieDetails);\n  }, []);\n\n  useEffect(() => {\n    fetchMovie(movieId);\n  }, [fetchMovie, movieId]);\n\n  return movie ? (\n    <>\n      <Title>{movie.title}</Title>\n      <GenreLabel>\n        {movie.genres.map(genre => genre.name).join(', ')}\n      </GenreLabel>\n      <Overview>{movie.overview}</Overview>\n    </>\n  ) : null;\n});\n","import React, { useState } from 'react';\nimport styled from \"styled-components\";\nimport { theme } from '../theme';\nimport { searchMovie } from \"../api/MovieApi\";\n\nconst INPUT_ID = \"movieSearchInput\";\n\nconst Container = styled.div`\n  display: flex;\n  margin-top: ${theme.margin.x2}px;\n  justify-content: center;\n`;\n\nconst Description = styled.h2`\n  display: flex;\n  color: ${theme.color.WHITE};\n  margin: ${theme.margin.x1}px 0px 0px 0px;\n  user-select: none;\n`;\n\nconst SearchButton = styled.div`\n  display: flex;\n  margin-left: ${theme.margin.x2}px;\n  margin-top: ${theme.margin.x1}px;\n  justify-content: center;\n  align-items: center;\n  background-color: ${theme.color.BLUE};\n  border-radius: 10px;\n  height: 35px;\n`;\n\nconst SearchButtonLabel = styled.p`\n  margin-left: ${theme.margin.x1}px;\n  margin-right: ${theme.margin.x1}px;\n  color: ${theme.color.WHITE};\n  user-select: none;\n`;\n\nconst SearchContainer = styled.div`\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  background-color: ${theme.color.WHITE};\n  max-width: 370px;\n  margin-left: ${theme.margin.x2}px;\n  margin-top: ${theme.margin.x1}px;\n  border-radius: 4px;\n`;\n\nconst SearchBarContainer = styled.input`\n  display: flex;\n  flex-grow: 1;\n  background-color: ${theme.color.WHITE};\n  height: 30px;\n  max-width: 370px;\n`;\n\nconst SearchResultContainer = styled.div`\n  overflow: auto;\n  height: ${props => props.isEmpty ? \"0px\" : \"300px\"};\n`;\n\nconst SearchResultContentContainer = styled.div`\n  display: flex;\n  background-color: ${theme.color.WHITE};\n  border-bottom-width: 1;\n  border-bottom-width-color: black;\n  padding: ${theme.margin.x1}px ${theme.margin.x1}px ${theme.margin.x1}px ${theme.margin.x1}px;\n`;\n\nconst SearchResultLabel = styled.p`\n  user-select: none;\n`;\n\nexport const AddBar = ({ addAnwser }) => {\n  const [movieList, setMovieList] = useState([]);\n\n  const onSearch = async () => {\n    const query = document.getElementById(INPUT_ID);\n    if (query.value) {\n      const movies = await searchMovie(query.value);\n      setMovieList(movies);\n    }\n  }\n\n  const onMovieSelect = (movieId, movieTitle) => {\n    console.log(\"Selected movie: \", movieId, movieTitle);\n    setMovieList([]);\n    addAnwser(movieId, movieTitle);\n  }\n\n  return (\n    <Container>\n      <Description>Ajouter un film : </Description>\n      <SearchContainer>\n        <SearchBarContainer\n          id={INPUT_ID}\n          type=\"text\"\n          placeholder=\"Rechercher un film\"\n        />\n        <SearchResultContainer isEmpty={!movieList.length}>\n          {movieList.map((movie) => (\n            <SearchResultContentContainer\n              key={movie.id}\n              onClick={() => onMovieSelect(movie.id, movie.title)}\n            >\n              <SearchResultLabel>{movie.title}</SearchResultLabel>\n            </SearchResultContentContainer>\n          ))}\n        </SearchResultContainer>\n      </SearchContainer>\n      <SearchButton onClick={onSearch}>\n        <SearchButtonLabel>\n          Rechercher\n        </SearchButtonLabel>\n      </SearchButton>\n    </Container>\n  )\n}","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { theme } from \"../../theme\";\nimport { getPoll, voteForPoll, addAnswerToPoll } from \"../../api/PollApi\"\nimport { Loader } from \"../../components/Loader\";\nimport { MovieDetails } from \"../../components/MovieDetails\";\nimport { AddBar } from \"../../components/AddBar\";\n\nconst Container = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  padding: ${theme.margin.x1}px;\n  background-color: ${theme.color.BLACK};\n`;\n\nconst Title = styled.h1`\n  color: ${theme.color.WHITE};\n  text-align: center;\n`;\n\nconst AnswerContainer = styled.div`\n  display: flex;\n  flex-grow: 1;\n  padding: ${theme.margin.x1}px;\n  margin-top: ${theme.margin.x1}px;\n  margin-bottom: ${theme.margin.x1}px;\n  background-color: ${props => {\n    switch (props.isAnswer) {\n      case true:\n        return theme.color.BLUE;\n      case false:\n        return theme.color.GREY;\n      case null:\n      default:\n        return theme.color.WHITE;\n    }\n  }};\n  border-radius: 8px;\n  max-width: 500px;\n`;\n\nconst AnswerLabel = styled.p`\n  margin: ${theme.margin.x2}px ${theme.margin.x1}px ${theme.margin.x2}px ${theme.margin.x1}px;\n  user-select: none;\n`;\n\nconst LineContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst InfoButton = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 40px;\n  width: 40px;\n  border-radius: 20px;\n  background-color: ${props => props.selected ? theme.color.BLUE : theme.color.GREY};\n  margin: ${theme.margin.x1}px;\n`\n\nconst InfoButtonLabel = styled.p`\n  user-select: none;\n`\n\nconst Spacer = styled.div`\n  display: flex;\n  flex: 1\n`\n\nexport const PollScreen = () => {\n  const [poll, setPoll] = useState(null);\n  const [answerId, setAnswerId] = useState(null);\n  const [results, setResults] = useState(null);\n  const [infoStates, setInfoStates] = useState({});\n  const getPercentage = (id) => {\n    const num = results[id];\n    const denom = Object.values(results).reduce((accu, curr) => accu + curr, 0);\n    return `${Math.round(num / denom * 100)} %`;\n  }\n\n  const hasAnswered = !!answerId;\n\n  const fetchPoll = async () => {\n    const fetchedPoll = await getPoll();\n    setPoll(fetchedPoll);\n  }\n\n  const onAnswer = async (id) => {\n    if (!hasAnswered) {\n      setAnswerId(id);\n      const pollAnswers = await voteForPoll(id);\n      setResults(pollAnswers);\n    }\n  }\n\n  useEffect(() => {\n    fetchPoll();\n  }, []);\n\n  const onInfoClick = (id) => {\n    const states = Object.keys(infoStates).reduce(\n      (acc, curr) => ({ ...acc, curr: false }),\n      {}\n    );\n    setInfoStates({ ...states, [id]: !infoStates[id] })\n  }\n\n  const addNewPollAnswer = (movieId, movieTitle) => {\n    const movieIdString = movieId.toString();\n    if (!poll.answers.find(({ id }) => id === movieIdString)) {\n      addAnswerToPoll(movieId, movieTitle);\n      setPoll({ ...poll, answers: [\n        ...poll.answers,\n        { id: movieIdString, title: movieTitle } \n      ]});\n    }\n  }\n\n  return (\n    poll ? \n    <Container>\n      <Title>{poll.title}</Title>\n      {poll.answers.map(answer => (\n        <LineContainer key={`answer-${answer.id}`}>\n          <AnswerContainer\n            onClick={() => onAnswer(answer.id)}\n            isAnswer={answerId ? answerId === answer.id : null}>\n            <AnswerLabel>{answer.title}</AnswerLabel>\n            <Spacer />\n            {results ? <AnswerLabel>{getPercentage(answer.id)}</AnswerLabel> : null}\n          </AnswerContainer>\n          <InfoButton onClick={() => onInfoClick(answer.id)} selected={infoStates[answer.id]}>\n            <InfoButtonLabel>i</InfoButtonLabel>\n          </InfoButton>\n        </LineContainer>\n      ))}\n      <AddBar addAnwser={addNewPollAnswer}/>\n      {poll.answers.map(answer => (\n        <div key={`info-${answer.id}`}>{infoStates[answer.id] && <MovieDetails movieId={answer.id} />}</div>\n      ))}\n    </Container> :\n    <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />\n  )\n}\n","import React from \"react\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport { PollScreen } from './pages/PollScreen';\n\nconst App = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/movie-poll\" component={PollScreen} />\n    </Switch>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}